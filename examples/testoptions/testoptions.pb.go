// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testoptions.proto

/*
Package testoptions is a generated protocol buffer package.

It is generated from these files:
	testoptions.proto

It has these top-level messages:
	AskNameRequest
	AskNameResponse
	HelloRequest
	HelloResponse
	Card
	PostCardRequest
	PostCardResponse
*/
package testoptions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/ilius/gragen/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AskNameRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *AskNameRequest) Reset()                    { *m = AskNameRequest{} }
func (m *AskNameRequest) String() string            { return proto.CompactTextString(m) }
func (*AskNameRequest) ProtoMessage()               {}
func (*AskNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AskNameRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AskNameResponse struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AskNameResponse) Reset()                    { *m = AskNameResponse{} }
func (m *AskNameResponse) String() string            { return proto.CompactTextString(m) }
func (*AskNameResponse) ProtoMessage()               {}
func (*AskNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AskNameResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloRequest struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HelloRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type HelloResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HelloResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Card struct {
	Message     string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	MessageBack string `protobuf:"bytes,2,opt,name=messageBack" json:"messageBack,omitempty"`
	Url         string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	UrlBack     string `protobuf:"bytes,4,opt,name=urlBack" json:"urlBack,omitempty"`
}

func (m *Card) Reset()                    { *m = Card{} }
func (m *Card) String() string            { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()               {}
func (*Card) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Card) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Card) GetMessageBack() string {
	if m != nil {
		return m.MessageBack
	}
	return ""
}

func (m *Card) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Card) GetUrlBack() string {
	if m != nil {
		return m.UrlBack
	}
	return ""
}

type PostCardRequest struct {
	Card *Card `protobuf:"bytes,1,opt,name=card" json:"card,omitempty"`
}

func (m *PostCardRequest) Reset()                    { *m = PostCardRequest{} }
func (m *PostCardRequest) String() string            { return proto.CompactTextString(m) }
func (*PostCardRequest) ProtoMessage()               {}
func (*PostCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PostCardRequest) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

type PostCardResponse struct {
	RefId  string `protobuf:"bytes,1,opt,name=refId" json:"refId,omitempty"`
	RefUrl string `protobuf:"bytes,2,opt,name=refUrl" json:"refUrl,omitempty"`
}

func (m *PostCardResponse) Reset()                    { *m = PostCardResponse{} }
func (m *PostCardResponse) String() string            { return proto.CompactTextString(m) }
func (*PostCardResponse) ProtoMessage()               {}
func (*PostCardResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PostCardResponse) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *PostCardResponse) GetRefUrl() string {
	if m != nil {
		return m.RefUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*AskNameRequest)(nil), "testoptions.AskNameRequest")
	proto.RegisterType((*AskNameResponse)(nil), "testoptions.AskNameResponse")
	proto.RegisterType((*HelloRequest)(nil), "testoptions.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "testoptions.HelloResponse")
	proto.RegisterType((*Card)(nil), "testoptions.Card")
	proto.RegisterType((*PostCardRequest)(nil), "testoptions.PostCardRequest")
	proto.RegisterType((*PostCardResponse)(nil), "testoptions.PostCardResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Testoptions service

type TestoptionsClient interface {
	AskName(ctx context.Context, in *AskNameRequest, opts ...grpc.CallOption) (*AskNameResponse, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	PostCard(ctx context.Context, in *PostCardRequest, opts ...grpc.CallOption) (*PostCardResponse, error)
}

type testoptionsClient struct {
	cc *grpc.ClientConn
}

func NewTestoptionsClient(cc *grpc.ClientConn) TestoptionsClient {
	return &testoptionsClient{cc}
}

func (c *testoptionsClient) AskName(ctx context.Context, in *AskNameRequest, opts ...grpc.CallOption) (*AskNameResponse, error) {
	out := new(AskNameResponse)
	err := grpc.Invoke(ctx, "/testoptions.testoptions/AskName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testoptionsClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/testoptions.testoptions/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testoptionsClient) PostCard(ctx context.Context, in *PostCardRequest, opts ...grpc.CallOption) (*PostCardResponse, error) {
	out := new(PostCardResponse)
	err := grpc.Invoke(ctx, "/testoptions.testoptions/PostCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Testoptions service

type TestoptionsServer interface {
	AskName(context.Context, *AskNameRequest) (*AskNameResponse, error)
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	PostCard(context.Context, *PostCardRequest) (*PostCardResponse, error)
}

func RegisterTestoptionsServer(s *grpc.Server, srv TestoptionsServer) {
	s.RegisterService(&_Testoptions_serviceDesc, srv)
}

func _Testoptions_AskName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestoptionsServer).AskName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testoptions.testoptions/AskName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestoptionsServer).AskName(ctx, req.(*AskNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testoptions_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestoptionsServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testoptions.testoptions/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestoptionsServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testoptions_PostCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestoptionsServer).PostCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testoptions.testoptions/PostCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestoptionsServer).PostCard(ctx, req.(*PostCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Testoptions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testoptions.testoptions",
	HandlerType: (*TestoptionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskName",
			Handler:    _Testoptions_AskName_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _Testoptions_SayHello_Handler,
		},
		{
			MethodName: "PostCard",
			Handler:    _Testoptions_PostCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testoptions.proto",
}

func init() { proto.RegisterFile("testoptions.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x52, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x55, 0xdb, 0xf4, 0xe7, 0xbb, 0xfd, 0xfa, 0x77, 0x85, 0x50, 0x08, 0x45, 0xaa, 0x2c, 0x55,
	0x2a, 0x0c, 0x8d, 0x54, 0x16, 0x46, 0x7e, 0x16, 0x58, 0x10, 0xb4, 0x82, 0xdd, 0xb4, 0xa6, 0x54,
	0x4d, 0xe3, 0x10, 0xbb, 0x03, 0x2b, 0x3b, 0x13, 0x8f, 0xc6, 0x2b, 0xf0, 0x20, 0x38, 0x8e, 0x0b,
	0x0e, 0x6a, 0xc4, 0x94, 0x7b, 0x7c, 0x8e, 0x8f, 0xcf, 0xbd, 0x37, 0xd0, 0x91, 0x4c, 0x48, 0x1e,
	0xc9, 0x05, 0x0f, 0xc5, 0x30, 0x8a, 0xb9, 0xe4, 0x58, 0xb7, 0x8e, 0xbc, 0xee, 0x9c, 0xf3, 0x79,
	0xc0, 0x7c, 0x1a, 0x2d, 0x7c, 0x1a, 0x86, 0x5c, 0x52, 0x4b, 0x4a, 0x8e, 0xa0, 0x79, 0x26, 0x96,
	0xd7, 0x74, 0xc5, 0xc6, 0xec, 0x79, 0xad, 0xae, 0xa1, 0x0b, 0xd5, 0x15, 0x13, 0x82, 0xce, 0x99,
	0x5b, 0xe8, 0x15, 0x06, 0xff, 0xc6, 0x1b, 0x48, 0xfa, 0xd0, 0xfa, 0xd6, 0x8a, 0x48, 0x79, 0x30,
	0x44, 0x70, 0x42, 0x85, 0x8d, 0x52, 0xd7, 0x64, 0x00, 0xff, 0x2f, 0x59, 0x10, 0xf0, 0xbf, 0x0d,
	0x0f, 0xa1, 0x61, 0x94, 0xc6, 0x2e, 0x5f, 0x1a, 0x82, 0x73, 0x41, 0xe3, 0x59, 0xbe, 0x02, 0x7b,
	0x50, 0x37, 0xe5, 0x39, 0x9d, 0x2e, 0xdd, 0xa2, 0x66, 0xed, 0x23, 0x6c, 0x43, 0x69, 0x1d, 0x07,
	0x6e, 0x49, 0x33, 0x49, 0x99, 0xb8, 0xa9, 0x8f, 0xd6, 0x3b, 0xa9, 0x9b, 0x81, 0xe4, 0x04, 0x5a,
	0x37, 0x5c, 0xc8, 0xe4, 0xcd, 0x4d, 0x1f, 0x7d, 0x70, 0xa6, 0x0a, 0xea, 0x77, 0xeb, 0xa3, 0xce,
	0xd0, 0x9e, 0xbb, 0xd6, 0x69, 0x9a, 0x9c, 0x42, 0xfb, 0xe7, 0xa6, 0xe9, 0x6b, 0x07, 0xca, 0x31,
	0x7b, 0xbc, 0x9a, 0x99, 0xcc, 0x29, 0xc0, 0x5d, 0xa8, 0xa8, 0xe2, 0x4e, 0x45, 0x4a, 0xc3, 0x1a,
	0x34, 0x7a, 0x2b, 0x82, 0xbd, 0x41, 0x9c, 0x40, 0xd5, 0xcc, 0x1d, 0xf7, 0x33, 0xaf, 0x66, 0x37,
	0xe7, 0x75, 0xb7, 0x93, 0x69, 0x06, 0xd2, 0x78, 0xfd, 0xf8, 0x7c, 0x2f, 0x56, 0xb1, 0xec, 0x27,
	0x5b, 0xc2, 0x5b, 0xa8, 0x4d, 0xe8, 0x8b, 0x1e, 0x3f, 0xee, 0x65, 0x2e, 0xda, 0xcb, 0xf3, 0xbc,
	0x6d, 0x94, 0x71, 0x6c, 0x6a, 0xc7, 0x1a, 0xa9, 0xf8, 0x4f, 0xda, 0xe6, 0x1e, 0x6a, 0x9b, 0xce,
	0x31, 0x9b, 0xe5, 0xd7, 0x28, 0xbd, 0x83, 0x1c, 0x36, 0x1b, 0x95, 0x94, 0xfd, 0x64, 0xa2, 0x0f,
	0x15, 0xfd, 0xab, 0x1e, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x26, 0x54, 0xe0, 0x72, 0xea, 0x02,
	0x00, 0x00,
}
